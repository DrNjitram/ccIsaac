<shaders>
    <shader name="Inverted">
        <parameters>
            <param name="inverted" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float inverted;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float InvertedOut;
            uniform mat4 Transform;

            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                InvertedOut = inverted;     // Passing data to fragment shader
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>
        <fragment><![CDATA[         
            varying lowp vec4 Color0;                                       
            varying mediump vec2 TexCoord0;                             
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;      
            varying lowp float InvertedOut;
            uniform sampler2D Texture0;

            void main(void) {
                vec2 newTCoord = TexCoord0;

				if(InvertedOut == 1){
                    newTCoord.y = (RenderDataOut.y/RenderDataOut.w) - newTCoord.y;
                    newTCoord.x = (RenderDataOut.x/RenderDataOut.z) - newTCoord.x;
				} 

                vec4 Color = Color0 * texture2D(Texture0, newTCoord);
                
				gl_FragColor = Color;
			}
        ]]></fragment>
    </shader>
</shaders>